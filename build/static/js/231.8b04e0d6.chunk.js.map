{"version":3,"file":"static/js/231.8b04e0d6.chunk.js","mappings":"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","sources":["components/chatBotFields/Sidebar.jsx","components/chatBotFields/deleteIcon/deleteIcon.jsx","components/chatHoc/inputHoc.jsx","components/chatBotFields/buttonNode.jsx","components/chatBotFields/textArea.jsx","components/chatBotFields/TextUpdaterNode.jsx","components/modal/paymentModal.jsx","components/chatBot/reactflow.jsx","hooks/useBuildJson.jsx","pages/Admin/manageChatBot/createChatBot/index.jsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport UploadIcon from '@mui/icons-material/Upload';\r\n\r\nexport default () => {\r\n  const [headText, setHeadText] = useState([]);\r\n  const onDragStart = (event, nodeType) => {\r\n    event.dataTransfer.setData(\"application/reactflow\", nodeType);\r\n    event.dataTransfer.setData(\"id\", event.target.id);\r\n    event.dataTransfer.setData(\"value\", event.target.innerText);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n  };\r\n\r\n  const handleUpload = (e) => {\r\n    try {\r\n      let files = e.target.files[0];\r\n        if(files.name.split('.')[1] !== 'xlsx'){\r\n        throw \"please Upload Excel file\"\r\n      }\r\n      readXlsxFile(e.target.files[0]).then((rows) => {\r\n        setHeadText(rows[0]);\r\n      });\r\n    } catch (error) {\r\n      console.log(\"err\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n  \r\n      <aside>\r\n      <form>\r\n        <label htmlFor=\"excelupload\" style={{color:\"#62B2EA\",cursor:\"pointer\",fontSize:\"18px\",border:\"2px #62B2EA solid \",fontWeight:\"bold\",display:\"flex\",alignItems:\"center\",justifyContent:'space-around'}}><UploadIcon/>Please Upload Excel\r\n         <input id=\"excelupload\" type=\"file\" onChange={(e) => handleUpload(e)} style={{display:\"none\"}}/>\r\n        </label >\r\n      </form>\r\n      <hr></hr>\r\n        <h2  style={{color:\"#1976D2\",margin:\"15px\"}} className=\"description\">\r\n          You can drag these nodes to the pane on the right.\r\n        </h2>\r\n        <div\r\n          className=\"dndnode input\"\r\n          onDragStart={(event) => onDragStart(event, \"input\")}\r\n          draggable\r\n        >\r\n          Input Node\r\n        </div>\r\n        <div\r\n          className=\"dndnode\"\r\n          id=\"groupnode_0\"\r\n          onDragStart={(event) => onDragStart(event, \"textupdater\")}\r\n          draggable\r\n        >\r\n          Group\r\n        </div>\r\n        <div\r\n          className=\"dndnode output\"\r\n          id=\"button\"\r\n          onDragStart={(event) => onDragStart(event, \"buttonNode\")}\r\n          draggable\r\n        >\r\n          Button\r\n        </div>\r\n        <div\r\n          className=\"dndnode output\"\r\n          onDragStart={(event) => onDragStart(event, \"textAreaUpdater\")}\r\n          draggable\r\n        >\r\n          Text\r\n        </div>\r\n        <hr></hr>\r\n        <h3 style={{color:\"#62B2EA\"}}>Excel Column</h3>\r\n        {headText.length > 0 ? (\r\n          <>\r\n            <Stack direction=\"column\" spacing={1} className=\"stackname\">\r\n              {headText.map((text, i) => {\r\n                return (\r\n                  <Chip\r\n                   className=\"chipname\"\r\n                    label={text}\r\n                    onDelete={()=>console.log('delete')}\r\n                    key={i}\r\n                    id={i}\r\n                    onDragStart={(event) => onDragStart(event, \"headtext\")}\r\n                    draggable\r\n                  />\r\n                );\r\n              })}\r\n            </Stack>\r\n          </>\r\n        ) : (\r\n          \"Please Upload Excel to set the Text\"\r\n        )}\r\n      \r\n      </aside>\r\n    </>\r\n  );\r\n};\r\n","import \"./deleteIcon.css\";\r\nimport ClearIcon from '@mui/icons-material/Clear';\r\nimport { useSelector } from \"react-redux\";\r\nconst DeleteIcon = ({onDeleteInstance,deleteId})=>{\r\n    let deleteNodeInstance = useSelector((state)=>state.flow.instanceNode);\r\n    \r\n    const onDeleteNode = () => {\r\n        let deleteNode = deleteNodeInstance?.getNodes()\r\n          .filter((element) => element.id === deleteId);\r\n          deleteNodeInstance.deleteElements({ nodes: deleteNode });\r\n      };\r\n\r\n    return (\r\n        <ClearIcon  fontSize=\"small\" className=\"iconstyle\" onClick={()=>{onDeleteNode()}}/>\r\n    )\r\n}\r\n\r\nexport default DeleteIcon;","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { NodeContext } from \"../../nodecontext/nodeContext\";\r\n\r\n\r\nexport const InputHoc = (FlowComponents)=>{\r\n    const UpdateInput = ({data,...props})=>{\r\n        let contextdata = useContext(NodeContext);\r\n        let dataNodeId = data.nodeId;\r\n        // let dataInstance = data.nodeInstance;\r\n      \r\n        let {changeValue } = contextdata;\r\n        const [inputValue, setInputValue] = useState(data.inputValue || \"\");\r\n     \r\n      \r\n        const handleChange = (event) => {\r\n          const data1 = event.target.value;\r\n          setInputValue(data1);\r\n          changeValue(event.target.value,dataNodeId)\r\n          // data.onChangeInput(data1, data.groupId);\r\n        };\r\n\r\n        // const deleteNode = ()=>{\r\n        //   handleDelete(dataNodeId,dataInstance)\r\n        // }\r\n\r\n        useEffect(()=>{\r\n          if(data.label){\r\n            setInputValue(data.label)\r\n          }\r\n        },[])\r\n      \r\n        const handleDrop = (e)=>{\r\n          let dropValue = `{${e.dataTransfer.getData('value')}}`;\r\n          let prevValue = inputValue+dropValue;\r\n          setInputValue((prevstate)=>prevstate+dropValue);\r\n          changeValue(prevValue,dataNodeId)\r\n        }\r\n\r\n        return <FlowComponents handleChange={handleChange} handleDrop={handleDrop}  inputValue={inputValue} dataone = {data} {...props}/>\r\n    }\r\n    return UpdateInput;\r\n}","import { Handle, Position } from \"reactflow\";\r\nimport DeleteIcon from \"./deleteIcon/deleteIcon\";\r\nimport { InputHoc } from \"../chatHoc/inputHoc\";\r\nimport \"./chatBotFieldsStyle.css\";\r\nfunction ButtonNode(props) {\r\n  const { dataone, isConnectable, handleChange, inputValue } = props;\r\n  let buttonStyle = {\r\n    backgroundColor: \"#b1bab3\",\r\n    border: \"none\",\r\n    width: \"80px\",\r\n    height: \"40px\",\r\n    borderRadius: \"5px\",\r\n    textAlign: \"center\",\r\n    boxShadow: \" -4px 5px 5px 0px rgba(225, 230, 226)\",\r\n  };\r\n  return (\r\n    <>\r\n      <div style={{ position: \"relative\" }}>\r\n       \r\n\r\n      <Handle\r\n        type=\"source\"\r\n        className='chathandleright chathandle'\r\n        position={Position.Right}\r\n        isConnectable={isConnectable}\r\n        style={{ borderColor: \"black !important\" }}\r\n      />\r\n        \r\n      <Handle\r\n        type=\"target\"\r\n        className='chathandle'\r\n        position={Position.Left}\r\n        isConnectable={isConnectable}\r\n        style={{ borderColor: \"black !important\" }}\r\n      />\r\n      \r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          className=\"activeborder \"\r\n          style={buttonStyle}\r\n          onChange={(e) => handleChange(e)}\r\n        />\r\n        <span className=\"customhandle\">\r\n\r\n        </span>\r\n        <DeleteIcon deleteId={dataone.nodeId} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InputHoc(ButtonNode);\r\n","import { Handle, Position } from \"reactflow\";\r\nimport \"../../index.css\";\r\nimport DeleteIcon from \"./deleteIcon/deleteIcon\";\r\nimport {InputHoc} from \"../chatHoc/inputHoc\";\r\nimport \"./chatBotFieldsStyle.css\"\r\nconst TextAreaUpdater = ({   isConnectable,handleDelete,handleChange,handleDrop,inputValue,dataone }) => {\r\n\r\n  return (\r\n    <>\r\n      <Handle  className='chathandle' type=\"target\" position={Position.Left} />\r\n      <Handle className='chathandle' type=\"source\" position={Position.Right} />\r\n      <div className=\"textareacontainer\" style={{position:\"relative\"}}>\r\n        <div\r\n          className=\"textareadiv quickdiv\"\r\n          style={{ backgroundColor: \"#db5290\" }}\r\n        >\r\n          {\" \"}\r\n          Response{\" \"}\r\n        </div>\r\n        <div>\r\n          <textarea\r\n            rows=\"5\"\r\n            cols=\"15\"\r\n            className=\"grouptextarea activeborder\"\r\n            value={inputValue}\r\n            onChange={(event) => handleChange(event)}\r\n            onDrop={(e)=>handleDrop(e)}\r\n          ></textarea>\r\n        </div>\r\n        <DeleteIcon  deleteId={dataone.nodeId}/>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default InputHoc(TextAreaUpdater);\r\n","import { Handle, NodeResizeControl, NodeResizer, Position } from \"reactflow\";\r\nimport DeleteIcon from \"./deleteIcon/deleteIcon\";\r\nimport { InputHoc } from \"../chatHoc/inputHoc\";\r\nimport \"./chatBotFieldsStyle.css\";\r\nfunction ResizeIcon() {\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"20\"\r\n      height=\"20\"\r\n      viewBox=\"0 0 24 24\"\r\n      strokeWidth=\"2\"\r\n      stroke=\"#ff0071\"\r\n      fill=\"none\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      style={{ position: \"absolute\", right: 5, bottom: 5 }}\r\n    >\r\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n      <polyline points=\"16 20 20 20 20 16\" />\r\n      <line x1=\"14\" y1=\"14\" x2=\"20\" y2=\"20\" />\r\n      <polyline points=\"8 4 4 4 4 8\" />\r\n      <line x1=\"4\" y1=\"4\" x2=\"10\" y2=\"10\" />\r\n    </svg>\r\n  );\r\n}\r\nconst handleStyle = { left: 10 };\r\n\r\nfunction TextUpdaterNode({\r\n  isConnectable,\r\n  handleDelete,\r\n  handleChange,\r\n  handleDrop,\r\n  inputValue,\r\n  dataone,\r\n}) {\r\n  const controlStyle = {\r\n    background: \"transparent\",\r\n    border: \"none\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <NodeResizeControl style={controlStyle} minWidth={100} minHeight={50}>\r\n        <ResizeIcon />\r\n      </NodeResizeControl>\r\n\r\n      <div\r\n        className=\"text-updater-node groupnode groupnodediv\"\r\n        style={{ position: \"relative\" }}\r\n        id={dataone.groupId}\r\n      >\r\n        <Handle\r\n          type=\"source\"\r\n          className='chathandle'\r\n          position={Position.Top}\r\n          isConnectable={isConnectable}\r\n        />\r\n        <div className=\"textareadiv quickdiv\">Quick Reply</div>\r\n        <label className=\"groupLabel\">Message:</label>\r\n        <br></br>\r\n        <textarea\r\n          className=\"groupinput activeborder\"\r\n          rows=\"5\"\r\n          cols=\"20\"\r\n          // value={data.label}\r\n          value={inputValue}\r\n          onChange={(event) => handleChange(event)}\r\n          onDrop={(e) => handleDrop(e)}\r\n        ></textarea>\r\n        <Handle\r\n          type=\"target\"\r\n          className='chathandle'\r\n          position={Position.Left}\r\n          isConnectable={isConnectable}\r\n        />\r\n        <DeleteIcon deleteId={dataone.nodeId} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InputHoc(TextUpdaterNode);\r\n","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addPayment } from '../../redux/slice/flowSlice';\r\nimport { Formik } from 'formik';\r\n\r\nexport default function AlertUser({open,setOpenModal}) {\r\n//   const [open, setOpen] = React.useState(false);\r\nconst dispatch = useDispatch();\r\n  const handleClickOpen = () => {\r\n    // setOpen(true);\r\n  };\r\nconst handleAgree = ()=>{\r\n    dispatch(addPayment(5))\r\n    setOpenModal(false)\r\n}\r\n  const handleClose = () => {\r\n    setOpenModal(false)\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n     \r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Use Google's location service?\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n           Since You have choosen \"Tier1\", Adding card is restricted\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Disagree</Button>\r\n          <Button onClick={handleAgree} autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import {\r\n  forwardRef,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  MarkerType,\r\n  ReactFlow,\r\n  ReactFlowProvider,\r\n  useEdgesState,\r\n  addEdge,\r\n  useNodesState,\r\n} from \"reactflow\";\r\nimport { memo } from \"react\";\r\nimport Sidebar from \"../chatBotFields/Sidebar\";\r\nimport ButtonNode from \"../chatBotFields/buttonNode\";\r\nimport TextAreaUpdater from \"../chatBotFields/textArea\";\r\nimport TextUpdaterNode from \"../chatBotFields/TextUpdaterNode\";\r\nimport \"reactflow/dist/style.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AlertUser from \"../modal/paymentModal\";\r\nimport { NodeContext } from \"../../nodecontext/nodeContext\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addInstance } from \"../../redux/slice/flowSlice\";\r\nimport { adminSelector } from \"../../redux/slice/adminSlice\";\r\n\r\nconst FlowPage = forwardRef((props, ref) => {\r\n  const {\r\n    // updateNode,\\\r\n    setNodes,\r\n    nodes,\r\n    reactFlowInstance,\r\n    edges,\r\n    onNodesChange,\r\n    onEdgesChange,\r\n    setReactFlowInstance,\r\n    onDragOver,\r\n    onStop,\r\n    setEdges,\r\n  } = props;\r\n\r\n  const{getChatBotDataById} = useSelector(adminSelector)\r\n\r\n  const reactFlowWrapper = useRef(null);\r\n  let contextdata = useContext(NodeContext);\r\n  let { value, changeId, changeValue } = contextdata;\r\n  const [nodeNum, setNodeNum] = useState(0);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [nodeTypes, setNodeTypes] = useState({\r\n    textupdater: TextUpdaterNode,\r\n    buttonNode: ButtonNode,\r\n    textAreaUpdater: TextAreaUpdater,\r\n  });\r\n  let dispatch = useDispatch();\r\n\r\nconst nodesRef = useRef(nodes);\r\n\r\nuseEffect(() => {\r\n  nodesRef.current = nodes;\r\n}, [nodes,setNodes]);\r\n\r\n  const getId = () => {\r\n    let oldNodeId = nodesRef.current?.filter((node) => node.id.includes(\"dndnode\"));\r\n    let  nodeId = oldNodeId[oldNodeId.length-1]?.id?.split('_')[1];\r\n    let id = nodeId?parseInt(nodeId)+1 :  0 ;\r\n    return `dndnode_${id++}`;\r\n  };\r\n  \r\n  const getGroupId = () => {\r\n    let oldGroudNodeId = nodesRef.current?.filter(\r\n      (node) =>  node.id.includes(\"groupnode\")\r\n    );\r\n    let groupId = parseInt(oldGroudNodeId[oldGroudNodeId.length-1]?.id?.split('_')[1]) + 1 || 0 ;\r\n    return `groupnode_${groupId++}`;\r\n  }\r\n\r\n  const { payPrice } = useSelector((state) => state.flow);\r\n\r\n  const onConnect = (params) =>\r\n\r\n    setEdges((eds) => {\r\n      params.markerEnd = {\r\n        type: MarkerType.ArrowClosed,\r\n        width: 20,\r\n        height: 20,\r\n        color: \"black\",\r\n      };\r\n      params.className = \"customnode\";\r\n      return addEdge(params, eds);\r\n    });\r\n\r\n  //updating node from context value\r\n  useEffect(() => {\r\n    updateNode(changeId, value);\r\n \r\n  }, [value,setNodes]);\r\n\r\n  const updateNode = (id, value) => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === id) {\r\n          node.data = {\r\n            ...node.data,\r\n            label: value,\r\n          };\r\n        }\r\n        return node;\r\n      })\r\n    );\r\n  };\r\n  // reactFlowInstance.addNodes(nodes)\r\n  // reactFlowInstance.addEdges(edges)\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n      let parentGroupId = event.target.id;\r\n      let parentWrapper = event.target.classList[0];\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      let type = event.dataTransfer.getData(\"application/reactflow\");\r\n      let droppingid = event.dataTransfer.getData(\"id\");\r\n      const parentPosition = reactFlowInstance\r\n        .getNodes()\r\n        .find((element) => element.id === parentGroupId)?.position;\r\n      if (typeof type === \"undefined\" || !type) {\r\n        return;\r\n      }\r\n      if (type === \"headtext\") return;\r\n      let newNode;\r\n      const position = reactFlowInstance.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n      if (parentGroupId.split(\"_\").includes(\"groupnode\")) {\r\n        const adjustedPosition = {\r\n          x: position.x - parentPosition.x - 40,\r\n          y: position.y - parentPosition.y - 40,\r\n        };\r\n        let nodeId = getId();\r\n        newNode = {\r\n          id: nodeId,\r\n          type: type,\r\n          position: adjustedPosition,\r\n          parentNode: parentGroupId,\r\n          data: { nodeId: nodeId },\r\n          // onChangeInput: updateTextUpdaterInput },\r\n        };\r\n      } else if (\r\n        parentWrapper === \"react-flow__pane\" &&\r\n        droppingid.split(\"_\").includes(\"groupnode\")\r\n      ) {\r\n        let nodeID = getGroupId();\r\n        newNode = {\r\n          id: nodeID,\r\n          type: type,\r\n          position,\r\n          data: {\r\n            groupId: nodeID,\r\n            nodeId: nodeID,\r\n            // onChangeInput: updateTextUpdaterInput,\r\n          },\r\n        };\r\n      } else {\r\n        let nodeId = getId();\r\n        newNode = {\r\n          id: nodeId,\r\n          type: type,\r\n          position,\r\n          data: { nodeId: nodeId },\r\n          // , onChangeInput: updateTextUpdaterInput },\r\n        };\r\n      }\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [reactFlowInstance]\r\n  );\r\n  useEffect(() => {\r\n    setNodeNum(nodes.length);\r\n    dispatch(addInstance({ instance: reactFlowInstance }));\r\n  }, [nodes,dispatch,setNodes, getChatBotDataById]);\r\n\r\n  const Payment = () => {\r\n    setOpenModal(true);\r\n  };\r\n  return (\r\n    <>\r\n      <ReactFlowProvider>\r\n        <div\r\n          className=\"reactflow-wrapper\"\r\n          id=\"flowpaper\"\r\n          ref={reactFlowWrapper}\r\n        >\r\n          <AlertUser open={openModal||\"\"} setOpenModal={setOpenModal} />\r\n\r\n          <ReactFlow\r\n            nodes={nodes}\r\n            edges={edges}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            onInit={setReactFlowInstance}\r\n            className=\"react-flow-subflows-example\"\r\n            onDrop={nodeNum < payPrice ? onDrop : Payment}\r\n            onDragOver={onDragOver}\r\n            nodeTypes={nodeTypes}\r\n            onNodeDragStop={onStop}\r\n            fitView\r\n          ></ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n      </ReactFlowProvider>\r\n    </>\r\n  );\r\n});\r\nexport default FlowPage;\r\n","import { useCallback } from \"react\";\r\n  // function buildJSON(nodes, edges, nodeId, oldid) {\r\n  //   const node = nodes.find((n) => n.id === nodeId);\r\n  //   if (!node) {\r\n  //     return null;\r\n  //   }\r\n  //   const result = {\r\n  //     message: node.data.label || node.data.response,\r\n  //   };\r\n  //   if (nodeId.split(\"_\")[0] == \"groupnode\") {\r\n  //     const buttonnodeId = nodes.filter((n) => n.parentNode === nodeId);\r\n  //     const outgoingEdges = buttonnodeId.map((node) => {\r\n  //       let availableoutgoing = edges.filter(\r\n  //         (edge) => edge.source === node.id\r\n  //       )[0];\r\n  //       if (availableoutgoing) {\r\n  //         return availableoutgoing;\r\n  //       } else {\r\n  //         return node;\r\n  //       }\r\n  //     });\r\n  //     // const outgoingEdges = edges.filter((edge) => edge.source === nodeId);\r\n  //     if (outgoingEdges.length > 0) {\r\n  //       result.options = outgoingEdges.map((edge) => {\r\n  //         if (edge?.source) {\r\n  //           const currentNode = nodes.find((n) => n.id === edge?.source);\r\n  //           const followUpNode = nodes.find((n) => n.id === edge?.target);\r\n\r\n  //           if (currentNode?.parentNode) {\r\n  //             if (followUpNode) {\r\n  //               oldId = followUpNode.id;\r\n  //               return {\r\n  //                 response: currentNode.data.label,\r\n  //                 follow_up: buildJSON(\r\n  //                   nodes,\r\n  //                   edges,\r\n  //                   followUpNode.id,\r\n  //                   currentNode.id\r\n  //                 ),\r\n  //               };\r\n  //             }\r\n  //           } else {\r\n  //             oldId = followUpNode?.id;\r\n  //             return {\r\n  //               message: currentNode?.data.label,\r\n  //               follow_up: buildJSON(\r\n  //                 nodes,\r\n  //                 edges,\r\n  //                 followUpNode?.id,\r\n  //                 currentNode?.id\r\n  //               ),\r\n  //             };\r\n  //           }\r\n  //         } else {\r\n  //           return {\r\n  //             response: edge.data.label,\r\n  //           };\r\n  //         }\r\n  //       });\r\n  //     }\r\n  //   } else {\r\n  //     const outgoingEdges = edges.filter((edge) => edge.source === nodeId);\r\n  //     if (outgoingEdges.length > 0) {\r\n  //       result.options = outgoingEdges.map((edge) => {\r\n  //         const currentNode = nodes.find((n) => n.id === edge.source);\r\n\r\n  //         const followUpNode = nodes.find((n) => n.id === edge.target);\r\n  //         if (oldId == currentNode.id) {\r\n  //           oldId = followUpNode.id;\r\n  //           let lastEdge = edges.find((n) => n.source == currentNode.id);\r\n  //           let lastNode = nodes.find((n) => n.id == lastEdge.target);\r\n  //           return {\r\n  //             // response: lastNode.data.label,\r\n  //             follow_up: buildJSON(\r\n  //               nodes,\r\n  //               edges,\r\n  //               followUpNode.id,\r\n  //               currentNode.id\r\n  //             ),\r\n  //           };\r\n  //         } else if (oldId !== currentNode.id) {\r\n  //           oldId = followUpNode.id;\r\n  //           return {\r\n  //             message: currentNode.data.label,\r\n  //             follow_up: buildJSON(\r\n  //               nodes,\r\n  //               edges,\r\n  //               followUpNode.id,\r\n  //               currentNode.id\r\n  //             ),\r\n  //           };\r\n  //         }\r\n\r\n  //         if (currentNode.parentNode) {\r\n  //           oldId = currentNode.id;\r\n  //           return {\r\n  //             response: currentNode.data.label,\r\n  //             follow_up: buildJSON(\r\n  //               nodes,\r\n  //               edges,\r\n  //               followUpNode.id,\r\n  //               currentNode.id\r\n  //             ),\r\n  //           };\r\n  //         } else {\r\n  //           return {\r\n  //             follow_up: buildJSON(\r\n  //               nodes,\r\n  //               edges,\r\n  //               followUpNode.id,\r\n  //               currentNode.id\r\n  //             ),\r\n  //           };\r\n  //         }\r\n  //       });\r\n  //     }\r\n  //   }\r\n\r\n  //   return result;\r\n  // }\r\nconst useBuildJson = (nodes, edges, nodeId)=>{\r\n    let oldId;\r\n    const buildJSON = useCallback( (nodes, edges, nodeId)=>{\r\n\r\n        const node = nodes.find((n) => n.id === nodeId);\r\n        if (!node) {\r\n          return null;\r\n        }\r\n        const result = {\r\n          message: node.data.label || node.data.response,\r\n        };\r\n        if (nodeId.split(\"_\")[0] == \"groupnode\") {\r\n          const buttonnodeId = nodes.filter((n) => n.parentNode === nodeId);\r\n          const outgoingEdges = buttonnodeId.map((node) => {\r\n            let availableoutgoing = edges.filter(\r\n              (edge) => edge.source === node.id\r\n            )[0];\r\n            if (availableoutgoing) {\r\n              return availableoutgoing;\r\n            } else {\r\n              return node;\r\n            }\r\n          });\r\n          // const outgoingEdges = edges.filter((edge) => edge.source === nodeId);\r\n          if (outgoingEdges.length > 0) {\r\n            result.options = outgoingEdges.map((edge) => {\r\n              if (edge?.source) {\r\n                const currentNode = nodes.find((n) => n.id === edge?.source);\r\n                const followUpNode = nodes.find((n) => n.id === edge?.target);\r\n    \r\n                if (currentNode?.parentNode) {\r\n                  if (followUpNode) {\r\n                    oldId = followUpNode.id;\r\n                    return {\r\n                      response: currentNode.data.label,\r\n                      follow_up: buildJSON(\r\n                        nodes,\r\n                        edges,\r\n                        followUpNode.id,\r\n                        currentNode.id\r\n                      ),\r\n                    };\r\n                  }\r\n                } else {\r\n                  oldId = followUpNode?.id;\r\n                  return {\r\n                    message: currentNode?.data.label,\r\n                    follow_up: buildJSON(\r\n                      nodes,\r\n                      edges,\r\n                      followUpNode?.id,\r\n                      currentNode?.id\r\n                    ),\r\n                  };\r\n                }\r\n              } else {\r\n                return {\r\n                  response: edge.data.label,\r\n                };\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          const outgoingEdges = edges.filter((edge) => edge.source === nodeId);\r\n          if (outgoingEdges.length > 0) {\r\n            result.options = outgoingEdges.map((edge) => {\r\n              const currentNode = nodes.find((n) => n.id === edge.source);\r\n    \r\n              const followUpNode = nodes.find((n) => n.id === edge.target);\r\n              if (oldId == currentNode.id) {\r\n                oldId = followUpNode.id;\r\n                let lastEdge = edges.find((n) => n.source == currentNode.id);\r\n                let lastNode = nodes.find((n) => n.id == lastEdge.target);\r\n                return {\r\n                  // response: lastNode.data.label,\r\n                  follow_up: buildJSON(\r\n                    nodes,\r\n                    edges,\r\n                    followUpNode.id,\r\n                    currentNode.id\r\n                  ),\r\n                };\r\n              } else if (oldId !== currentNode.id) {\r\n                oldId = followUpNode.id;\r\n                return {\r\n                  message: currentNode.data.label,\r\n                  follow_up: buildJSON(\r\n                    nodes,\r\n                    edges,\r\n                    followUpNode.id,\r\n                    currentNode.id\r\n                  ),\r\n                };\r\n              }\r\n    \r\n              if (currentNode.parentNode) {\r\n                oldId = currentNode.id;\r\n                return {\r\n                  response: currentNode.data.label,\r\n                  follow_up: buildJSON(\r\n                    nodes,\r\n                    edges,\r\n                    followUpNode.id,\r\n                    currentNode.id\r\n                  ),\r\n                };\r\n              } else {\r\n                return {\r\n                  follow_up: buildJSON(\r\n                    nodes,\r\n                    edges,\r\n                    followUpNode.id,\r\n                    currentNode.id\r\n                  ),\r\n                };\r\n              }\r\n            });\r\n          }\r\n        }\r\n    \r\n        return result;\r\n    },[nodes, edges,nodeId])\r\n  return {buildJSON}\r\n}\r\n\r\nexport default useBuildJson;","import React, { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\nimport { useNodesState, useEdgesState } from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\nimport FlowPage from \"../../../../components/chatBot/reactflow\";\r\nimport \"../manageChatbot.css\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport { useDispatch ,useSelector} from \"react-redux\";\r\nimport {\r\n  addChatBotApi,\r\n  editChatByIdApi,\r\n  getChatBotByIdApi,\r\n} from \"../../../../redux/action/adminAction\";\r\nimport { adminSelector } from \"../../../../redux/slice/adminSlice\";\r\nimport useBuildJson from \"../../../../hooks/useBuildJson\";\r\nconst label = { inputProps: { \"aria-label\": \"Switch demo\" } };\r\n\r\nconst initialNodes = [\r\n  {\r\n    id: \"1\",\r\n    type: \"input\",\r\n    data: { label: \"Start\" },\r\n    position: { x: 250, y: 5 },\r\n  },\r\n];\r\nconst CreateChat = () => {\r\n  const reactFlowWrapper = useRef(null);\r\n  //added custom hook with teh buildjson function to create the json\r\n  const {buildJSON} = useBuildJson();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  let { action = \"\", arrayIndex = \"\" } = location?.state || {};\r\n  let dispatch = useDispatch();\r\n  const { getChatBotDataByIdisLoading, getChatBotDataById } =\r\n    useSelector(adminSelector);\r\n\r\n  const [chatbotData, setChatbotData] = useState({\r\n    clientName: \"\",\r\n    chatbotName: \"\",\r\n  });\r\n\r\n  const onStop = (event, node) => {};\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  }, []);\r\n \r\n\r\n\r\n  useEffect(() => {\r\n    if (getChatBotDataById?.flow_data && action == \"Edit\") {\r\n      let nodeObject = getChatBotDataById?.flow_data;\r\n      let savedNodeObject = nodeObject?.nodes;\r\n      // let savedNodeObject = [...nodeObject[arrayIndex]?.flowElements.nodes];\r\n      // let savedEdges = [...nodeObject[arrayIndex]?.flowElements.edges];\r\n      setChatbotData({ clientName: getChatBotDataById?.Chatbot_name, chatbotName: getChatBotDataById?.Chatbot_name });\r\n      setNodes(nodeObject?.nodes);\r\n      setEdges(nodeObject?.edges);\r\n    } else {\r\n      setNodes(initialNodes);\r\n    }\r\n  }, [getChatBotDataById, action, setNodes, setEdges]);\r\n\r\n  useEffect(() => {\r\n    if (arrayIndex > 0) {\r\n      dispatch(getChatBotByIdApi(arrayIndex));\r\n    }\r\n  }, [arrayIndex, dispatch, setNodes, setEdges]);\r\n\r\n\r\n  const saveElements = () => {\r\n    const startingNodeId = \"1\";\r\n    const resultJSON = buildJSON(\r\n      reactFlowInstance.toObject().nodes,\r\n      reactFlowInstance.toObject().edges,\r\n      startingNodeId\r\n    );\r\n    let savedElements = {\r\n      flow_data: reactFlowInstance.toObject(),\r\n      Chatbot_name: chatbotData.clientName,\r\n      status: true,\r\n      json_content: resultJSON,\r\n    };\r\n    if (action == \"Edit\") {\r\n      dispatch(editChatByIdApi(arrayIndex, savedElements));\r\n    } else {\r\n      dispatch(addChatBotApi(savedElements));\r\n    }\r\n    navigate(\"/dashboard/chatbot\");\r\n  };\r\n\r\n  const updateName = (e) => {\r\n    e.preventDefault();\r\n    let { name, value } = e?.target;\r\n    setChatbotData({ ...chatbotData, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"dndflowheader\">\r\n        <h2>Manage ChatBot</h2>\r\n        <div className=\"dndflowfields\">\r\n          <div className=\"dndflowinput\">\r\n            <label>Client Name</label>\r\n            <input\r\n              value={chatbotData.clientName}\r\n              name=\"clientName\"\r\n              onChange={(e) => updateName(e)}\r\n            />\r\n          </div>\r\n          <div className=\"dndflowinput\">\r\n            <label>Chatbot Name</label>\r\n            <input\r\n              value={chatbotData.chatbotName}\r\n              name=\"chatbotName\"\r\n              onChange={(e) => updateName(e)}\r\n            />\r\n          </div>\r\n          <div className=\"dndactive\">\r\n            <label>Status:</label>\r\n            <span>Active</span>\r\n            <Switch {...label} defaultChecked />\r\n            <span>InActive</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"dndflow\">\r\n        <FlowPage\r\n          nodes={nodes}\r\n          ref={reactFlowWrapper}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          // onConnect={onConnect}\r\n          // onDrop={onDrop}\r\n          setEdges={setEdges}\r\n          setReactFlowInstance={setReactFlowInstance}\r\n          reactFlowInstance={reactFlowInstance}\r\n          onDragOver={onDragOver}\r\n          setNodes={setNodes}\r\n          onStop={onStop}\r\n        />\r\n\r\n        <button\r\n          onClick={() => saveElements()}\r\n          style={{\r\n            backgroundColor: \"#87cc87\",\r\n            margin: \"10px\",\r\n            color: \"white\",\r\n            fontWeight: \"bolder\",\r\n            height: \"30px\",\r\n            borderRadius: \"5px\",\r\n            fontSize: \"20px\",\r\n            position: \"fixed\",\r\n            bottom: \"0\",\r\n            right: \"0\",\r\n            border: \"none\",\r\n          }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateChat;\r\n"],"names":["headText","setHeadText","useState","onDragStart","event","nodeType","dataTransfer","setData","target","id","innerText","effectAllowed","_jsx","_Fragment","children","_jsxs","htmlFor","style","color","cursor","fontSize","border","fontWeight","display","alignItems","justifyContent","UploadIcon","type","onChange","e","files","name","split","readXlsxFile","then","rows","error","console","log","handleUpload","margin","className","draggable","length","Stack","direction","spacing","map","text","i","Chip","label","onDelete","_ref","onDeleteInstance","deleteId","deleteNodeInstance","useSelector","state","flow","instanceNode","ClearIcon","onClick","onDeleteNode","deleteNode","getNodes","filter","element","deleteElements","nodes","InputHoc","FlowComponents","data","props","contextdata","useContext","NodeContext","dataNodeId","nodeId","changeValue","inputValue","setInputValue","useEffect","handleChange","data1","value","handleDrop","dropValue","concat","getData","prevValue","prevstate","dataone","isConnectable","position","Handle","Position","Right","borderColor","Left","backgroundColor","width","height","borderRadius","textAlign","boxShadow","DeleteIcon","handleDelete","cols","onDrop","ResizeIcon","xmlns","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","right","bottom","d","points","x1","y1","x2","y2","NodeResizeControl","background","minWidth","minHeight","groupId","Top","AlertUser","open","setOpenModal","dispatch","useDispatch","handleClose","React","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","handleAgree","addPayment","autoFocus","forwardRef","ref","setNodes","reactFlowInstance","edges","onNodesChange","onEdgesChange","setReactFlowInstance","onDragOver","onStop","setEdges","getChatBotDataById","adminSelector","reactFlowWrapper","useRef","changeId","nodeNum","setNodeNum","openModal","nodeTypes","setNodeTypes","textupdater","TextUpdaterNode","buttonNode","ButtonNode","textAreaUpdater","TextAreaUpdater","nodesRef","current","getId","_nodesRef$current","_oldNodeId","_oldNodeId$id","oldNodeId","node","includes","parseInt","payPrice","updateNode","nds","useCallback","_reactFlowInstance$ge","preventDefault","parentGroupId","parentWrapper","classList","reactFlowBounds","getBoundingClientRect","droppingid","parentPosition","find","newNode","project","x","clientX","left","y","clientY","top","adjustedPosition","parentNode","nodeID","getGroupId","_nodesRef$current2","_oldGroudNodeId","_oldGroudNodeId$id","oldGroudNodeId","addInstance","instance","ReactFlowProvider","ReactFlow","onConnect","params","eds","markerEnd","MarkerType","ArrowClosed","addEdge","onInit","Payment","onNodeDragStop","fitView","Sidebar","useBuildJson","oldId","buildJSON","n","result","message","response","outgoingEdges","availableoutgoing","edge","source","options","currentNode","followUpNode","follow_up","lastEdge","inputProps","initialNodes","CreateChat","location","useLocation","navigate","useNavigate","useNodesState","useEdgesState","action","arrayIndex","getChatBotDataByIdisLoading","chatbotData","setChatbotData","clientName","chatbotName","dropEffect","flow_data","nodeObject","Chatbot_name","getChatBotByIdApi","updateName","Switch","defaultChecked","FlowPage","saveElements","resultJSON","toObject","savedElements","status","json_content","editChatByIdApi","addChatBotApi"],"sourceRoot":""}